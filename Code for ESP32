#include <Adafruit_GFX.h>       
#include <Adafruit_ST7735.h>    
#include <SPI.h>
#include <DHT.h>                
#include <Fonts/FreeSans9pt7b.h>
#include <WiFi.h>
#include <HTTPClient.h>


#define TFT_CS    5          
#define TFT_RST   15          
#define TFT_DC    32          
#define TFT_MOSI  23          
#define TFT_SCLK  18          

#define DHTPIN 4               
#define DHTTYPE DHT11          
#define LED_PIN 2              
#define MIC_PIN 34            
#define VIBRATION_PIN 12       

#define BLUE_LED 14            
#define ORANGE_LED 26          
#define WHITE_LED 12          
#define RED_LED 27             
#define BUZZER_PIN 22          
#define GREEN_LED 13


int vibrationCount = 0;
unsigned long startTime = 0;
const unsigned long interval = 2000; 

const char* ssid = "Sanula's Galaxy S21 FE 5G"; 
const char* password = "suduaraliyamala"; 
const char* url = "https://script.google.com/macros/s/AKfycbxk3e_z3JC_d3GF2VbmDG4YKi7v4VU0sv3Vqlbvsa_C2qmTEgfJLzfX37PqBzsECJah/exec"; 


const int threshold = 512; 
volatile int crossCount = 0; 
unsigned long lastTime = 0;
const int micInterval = 1000; 

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);
DHT dht(DHTPIN, DHTTYPE);      

void setup(void) {
  Serial.begin(115200);
  
  
  dht.begin();

   pinMode(BLUE_LED, OUTPUT);
  pinMode(ORANGE_LED, OUTPUT);
  pinMode(WHITE_LED, OUTPUT);
  pinMode(RED_LED, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);

 
  pinMode(LED_PIN, OUTPUT);    
  
  
  pinMode(MIC_PIN, INPUT);     

  
  pinMode(VIBRATION_PIN, INPUT);
  
  
  tft.initR(INITR_BLACKTAB);   
  Serial.println("Initialized");
  
  
  tft.setRotation(1);          
  
  
  tft.fillScreen(ST77XX_BLACK);
  
 
  tft.setTextWrap(false);
  tft.setFont(&FreeSans9pt7b);
  
  
  tft.setCursor(1, 30);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(1.9);
  tft.print("Temp:");

  tft.setCursor(1, 70);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(1.5);
  tft.print("Vibration:");

  tft.setCursor(1, 110);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(1.5);
  tft.print("Noise:");
  
  startTime = millis();  

  
  WiFi.begin(ssid, password);

 
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

void loop() {
  
  float temperature = dht.readTemperature();

  
  if (isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  
  static int lastMicValue = 0;
  int micValue = analogRead(MIC_PIN);
  

  if ((lastMicValue < threshold && micValue >= threshold) || (lastMicValue >= threshold && micValue < threshold)) {
      crossCount++;
  }
  lastMicValue = micValue;

  
  int frequency = 0; 
  if (millis() - lastTime >= micInterval) {
      frequency = crossCount; 
      Serial.print("Detected frequency: ");
      Serial.println(frequency);
      
      
      if (frequency > 10) {
          Serial.println("Noise detected");
      }

      crossCount = 0; 
      lastTime = millis();
  }

  
  int vibrationState = digitalRead(VIBRATION_PIN);

  
  if (vibrationState == HIGH) {
    vibrationCount++;
  }

  
  if (millis() - startTime >= interval) {
    
    tft.setCursor(80, 30);  
    tft.setTextColor(ST77XX_WHITE);
    tft.setTextSize(1.9);
    tft.fillRect(80, 15, 160, 40, ST77XX_BLACK);  
    tft.print(temperature);
    tft.print(" *C");

    
    tft.setCursor(80, 70);  
    tft.setTextColor(ST77XX_WHITE);
    tft.setTextSize(1.5);
    tft.fillRect(80, 55, 160, 40, ST77XX_BLACK);  
    tft.print(vibrationCount);  

    
    tft.setCursor(80, 110);  
    tft.setTextColor(ST77XX_WHITE);
    tft.setTextSize(1.5);
    tft.fillRect(80, 95, 160, 40, ST77XX_BLACK);  
    tft.print(frequency);  

    
    Serial.print("Temp: ");
    Serial.print(temperature);
    Serial.print(" *C, Vibration Count: ");
    Serial.print(vibrationCount);
    Serial.print(", Frequency: ");
    Serial.println(frequency); 

    
    bool tempCondition = (temperature > 30);
    bool vibrationCondition = (vibrationCount > 10);
    bool noiseCondition = (frequency > 10);

    digitalWrite(GREEN_LED, !(tempCondition || vibrationCondition || noiseCondition)); 
    
    if (tempCondition) {
      digitalWrite(BLUE_LED, HIGH); 
    } else {
      digitalWrite(BLUE_LED, LOW);  
    }

    if (vibrationCondition) {
      digitalWrite(ORANGE_LED, HIGH); 
    } else {
      digitalWrite(ORANGE_LED, LOW);  
    }

    if (noiseCondition) {
      digitalWrite(WHITE_LED, HIGH); 
    } else {
      digitalWrite(WHITE_LED, LOW);  
    }

    
    if (temperature > 30 && vibrationCount > 10 && frequency > 10) {
      digitalWrite(RED_LED, HIGH); 
      digitalWrite(BUZZER_PIN, HIGH); 
    } else {
      digitalWrite(RED_LED, LOW); 
      digitalWrite(BUZZER_PIN, LOW); 
    }

    
    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;
      String fullUrl = String(url) + "?temp=" + String(temperature) + "&vibration=" + String(vibrationCount) + "&noise=" + String(frequency);
      Serial.println("Sending URL: " + fullUrl); 
      
      http.begin(fullUrl); 
      int httpResponseCode = http.GET(); 

      if (httpResponseCode > 0) {
        String response = http.getString(); 
        Serial.println(response); 
      } else {
        Serial.print("Error on HTTP request: ");
        Serial.println(httpResponseCode);
      }

      http.end(); 
    }

    
    vibrationCount = 0;  
    startTime = millis();  
  }

  delay(100);  
}
